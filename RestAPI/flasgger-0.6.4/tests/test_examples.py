# coding: utf-8
from flex.core import validate


def test_validate_example_specs(test_data):
    """
    This test is generated by conftest.py
    for each app in examples app and `test_data` param is:

    mod, client, specs_data = test_data

    mod: examples.example_name (the test module)
    client: Flask app test client
    specs_data: {'url': {swag_specs}} for every spec in app

    :expectedresults: validate specs dictionary using flex
    """
    mod, client, specs_data = test_data
    for url, spec in specs_data.items():
        validate(spec)  # validate using Flex


def test_required_attributes(test_data):
    """
    This test is generated by conftest.py
    for each app in examples app and `test_data` param is:

    mod, client, specs_data = test_data

    mod: examples.example_name (the test module)
    client: Flask app test client
    specs_data: {'url': {swag_specs}} for every spec in app

    :expectedresults: assert required attributes are present
    """
    mod, client, specs_data = test_data
    for url, spec in specs_data.items():
        assert 'paths' in spec, 'paths is required'
        assert 'info' in spec, 'info is required'


def test_example_swag(test_data):
    """
    This test is generated by conftest.py
    for each app in examples app and `test_data` param is:

    mod, client, specs_data = test_data

    mod: examples.example_name (the test module)
    client: Flask app test client
    specs_data: {'url': {swag_specs}} for every spec in app

    :expectedresults: run mod.test_swag with no errors
    """
    mod, client, specs_data = test_data
    if getattr(mod, 'test_swag', None) is not None:
        mod.test_swag(client, specs_data)
